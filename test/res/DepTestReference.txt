assumptions:
0: "(G (! (room.heating.off <-> room.heating.on)))"
1: "(G (! (room.light.on <-> room.light.off)))"
2: "(G (! (room.shades.open && room.shades.closed)))"
3: "(G (! ((leftmost ball) && (rightmost ball))))"
4: "(G (cm.busy -> ((! cm.ready) && (! cm.standby))))"
5: "(G (cm.ready -> ((! cm.standby) && (! cm.busy))))"
6: "(G (cm.standby -> ((! cm.busy) && (! cm.ready))))"
7: "(G (room.empty -> (! switch.toggled)))"
8: "(G (room.somebodyEnters -> ((! room.empty) W room.somebodyLeaves)))"
9: "(G (room.window.opened -> ((! (allWindowsClosed room)) W room.window.closed)))"
10: "(G ([ball <- (moveLeft ball)] -> (X (! (rightmost ball)))))"
11: "(G ([ball <- (moveRight ball)] -> (X (! (leftmost ball)))))"
12: "(G ([room.heating.ctrl <- turnOff()] -> (F ([room.heating.ctrl <- turnOn()] R room.heating.off))))"
13: "(G ([room.heating.ctrl <- turnOn()] -> (F ([room.heating.ctrl <- turnOff()] R room.heating.on))))"
14: "(G ([room.shades.ctrl <- (moveTo percent0())] -> (F (((! [room.shades.ctrl <- (moveTo percent0())]) && (! [room.shades.ctrl <- room.shades.ctrl])) R room.shades.closed))))"
15: "(G ([room.shades.ctrl <- (moveTo percent100())] -> (F (((! [room.shades.ctrl <- (moveTo percent100())]) && (! [room.shades.ctrl <- room.shades.ctrl])) R room.shades.open))))"
16: "(G ([system.startNewTimer <- hour1()] -> (F timeout)))"
17: "(G ([system.startNewTimer <- hour2()] -> (F timeout)))"
18: "(G ([system.startNewTimer <- min20()] -> (F timeout)))"
19: "(G ((room.somebodyLeaves && room.empty) -> (room.empty W room.somebodyEnters)))"
20: "(G (([room.light <- turnOff()] || ([room.light <- toggle()] && room.light.on)) -> (X (F (([room.light <- turnOn()] || [room.light <- toggle()]) R room.light.off)))))"
21: "(G (([room.light <- turnOn()] || ([room.light <- toggle()] && room.light.off)) -> (X (F (([room.light <- turnOff()] || [room.light <- toggle()]) R room.light.on)))))"
22: "(G (room.warnlight.on <-> (! room.warnlight.off)))"
23: "(G ((cm.ready || cm.standby) || cm.busy))"
24: "(G (F t.saturday))"
25: "(G (F t.sunday))"
26: "(G (F ((between t.pm7) t.pm8)))"
27: "(G (F (! t.saturday)))"
28: "(G (F (! t.sunday)))"
29: "(G (F (! ((between t.pm7) t.pm8))))"
30: "(G ((([cm.ctrl <- makeCoffee()] && cm.ready) -> (X cm.busy)) U (cm.finished && (([cm.ctrl <- makeCoffee()] || [cm.ctrl <- turnOff()]) R cm.ready))))"
31: "(G ((([cm.ctrl <- turnOff()] && cm.ready) -> (X cm.busy)) U ([cm.ctrl <- turnOn()] R cm.standby)))"
32: "(G ((([cm.ctrl <- turnOn()] && cm.standby) -> (X cm.busy)) U (([cm.ctrl <- makeCoffee()] || [cm.ctrl <- turnOff()]) R cm.ready)))"
33: "(G (([alarm.control <- turnOff()] -> [alarm.control <- turnOn()]) R (! alarm)))"
34: "(G (([alarm.control <- turnOn()] -> [alarm.control <- turnOff()]) R alarm))"
35: "(G (([room.warnlight.control <- turnOff()] -> [room.warnlight.control <- turnOn()]) R room.warnlight.off))"
36: "(G (([room.warnlight.control <- turnOn()] -> [room.warnlight.control <- turnOff()]) R room.warnlight.on))"

guarantees:
0: "(G (bed.enter -> (F ((((between t.pm7) t.pm8) -> room.shades.closed) W (alarm && (F (((! (bright outside.brightness)) -> room.shades.closed) W bed.exit)))))))"
1: "(G (room.somebodyEnters -> (F (cm.ready W (room.somebodyLeaves && room.empty)))))"
2: "(G (room.window.opened -> ([music.ctrl <- (play overture())] && (F (room.heating.off W (room.window.closed && (allWindowsClosed room)))))))"
3: "(G ((bright outside.brightness) -> ((switch.toggled && room.light.off) -> (X (F (room.light.on W (switch.toggled || room.empty)))))))"
4: "(G ((bright outside.brightness) -> (F room.shades.closed)))"
5: "(G ((leftmost ball) -> (F [ball <- (moveRight ball)])))"
6: "(G ((rightmost ball) -> (F [ball <- (moveLeft ball)])))"
7: "(G (((gt outside.temperature) room.temperature) -> (F room.heating.off)))"
8: "(G ((room.screen.lowered && (bright outside.brightness)) -> (F room.shades.closed)))"
9: "(G ((room.somebodyLeaves && room.empty) -> ([system.startNewTimer <- hour2()] && (F (room.somebodyEnters || (timeout && (F (room.light.off W room.somebodyEnters))))))))"
10: "(G ((room.window.closed && (allWindowsClosed room)) -> ([system.startNewTimer <- hour1()] && (F (room.window.opened || (F ((((tooHigh room.co2Level) -> room.warnlight.on) && ((! (tooHigh room.co2Level)) -> room.warnlight.off)) W room.window.opened)))))))"
11: "(G ((wakeup && ((between t.am5) t.am10)) -> ([cm.ctrl <- makeCoffee()] && (F (cm.ready && ((((t.saturday || t.sunday) && [radio.ctrl <- turnOn()]) && ([system.startNewTimer <- min20()] && (F (timeout && ((asleep partner) -> [room.shades.ctrl <- (moveTo percent100())]))))) || (((! (t.saturday || t.sunday)) && [tv.ctrl <- turnOn()]) && ([system.startNewTimer <- min20()] && (F (timeout && ((asleep partner) -> [room.shades.ctrl <- (moveTo percent100())])))))))))))"
12: "(G (((leftmost ball) && (X (! (leftmost ball)))) -> ((! [ball <- (moveLeft ball)]) W (rightmost ball))))"
13: "(G (((rightmost ball) && (X (! (rightmost ball)))) -> ((! [ball <- (moveRight ball)]) W (leftmost ball))))"
14: "(G (((! (leftmost ball)) && (! (rightmost ball))) -> (F ([ball <- (moveLeft ball)] || [ball <- (moveRight ball)]))))"
15: "(G (((t.am630 && (! (t.saturday || t.sunday))) && bed.occupied) -> ((F (((room.shades.open <-> (bright outside.brightness)) && (room.light.on <-> (! (bright outside.brightness)))) W (room.somebodyLeaves && room.empty))) && (F (bed.exit || (t.am7 && (F (alarm W bed.exit))))))))"
16: "(G ((X room.light.on) -> (! room.empty)))"
17: "(G (F [x <- y]))"
18: "(G (F [x <- z]))"

dependencies:
0 <- [2,7,8,14,15,19,26,29,33,34]
1 <- [4,5,6,8,19,23,30,31,32]
2 <- [0,9,12,13]
3 <- [1,7,8,19,20,21]
4 <- [2,14,15]
5 <- [3,10,11]
6 <- [3,10,11]
7 <- [0,12,13]
8 <- [2,14,15]
9 <- [1,7,8,16,17,18,19,20,21]
10 <- [1,9,16,17,18,20,21,22,35,36]
11 <- [2,4,5,6,14,15,16,17,18,23,24,25,27,28,30,31,32]
12 <- [3,10,11]
13 <- [3,10,11]
14 <- [3,10,11]
15 <- [1,2,7,8,14,15,19,20,21,24,25,27,28,33,34]
16 <- [1,7,8,19,20,21]
17 <- []
18 <- []
